// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.openai.generated;

import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;
import com.azure.core.credential.AccessToken;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.utils.TestUtils;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;

import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import reactor.core.publisher.Mono;

class OpenAIClientTestBase extends TestProxyTestBase {

    private AzureKeyCredential _apiKey;
    private final Object _deploymentIdLock = new Object();
    protected OpenAIClient openAIClient;

    static {
         final String CompletionsDeploymentIdVariable = "OPENAI_DEPLOYMENT_ID";
         final String ChatCompletionsDeploymentIdVariable = "OPENAI_CHAT_COMPLETIONS_DEPLOYMENT_ID";
         final String EmbeddingsDeploymentIdVariable = "OPENAI_EMBEDDINGS_DEPLOYMENT_ID";
         final String OpenAIAuthTokenVariable = "OPENAI_AUTH_TOKEN";
         final String EndpointVariable = "OPENAI_ENDPOINT";
         final String ResourceGroupName = "openai-test-rg";
         final String CognitiveServicesAccountName = "openai-sdk-test-automation-account-eastus";
         final String CompletionsModelName = "text-davinci-002";
         final String ChatCompletionsModelName = "gpt-35-turbo";
         final String EmbeddingsModelName = "text-similarity-curie-001";
         final String NonAzureCompletionsModelName = "text-davinci-002";
         final String NonAzureChatCompletionsModelName = "gpt-3.5-turbo";
         final String NonAzureEmbeddingsModelName = "text-embedding-ada-002";
         final String SubDomainPrefix = "sdk";
         final String AzureLocation = "eastus";
//         static AzureLocation Location = AzureLocation.EastUS;
    }

    @Override
    protected void beforeTest() {
        createDeployment();

        OpenAIClientBuilder openAIClientbuilder =
            new OpenAIClientBuilder()
                .endpoint(interceptorManager.isPlaybackMode() ? "https://localhost:8080"
                    : Configuration.getGlobalConfiguration().get("AZURE_OPENAI_ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            openAIClientbuilder
                .httpClient(interceptorManager.getPlaybackClient())
                .credential(new AzureKeyCredential("FAKE_API_KEY"));
        } else if (getTestMode() == TestMode.RECORD) {
            openAIClientbuilder
                .addPolicy(interceptorManager.getRecordPolicy())
//                .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get("AZURE_OPENAI_KEY")));
            // TODO: set the endpoint correctly using ArmClient (Azure Resource Management Client)
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            openAIClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        openAIClient = openAIClientbuilder.buildClient();
//        openAIAsyncClient = openAIClientbuilder.buildAsyncClient();
    }

    private void createDeployment() {
        if(getTestMode() == TestMode.PLAYBACK) {
            // TODO
        } else if(_apiKey != null) {
            // TODO
        }
        else {
            synchronized (_deploymentIdLock) {
                if (_apiKey == null) {
                    AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);
                    TokenCredential credential = new DefaultAzureCredentialBuilder()
                        .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())
                        .build();

                    CognitiveServicesManager manager = CognitiveServicesManager
                        .authenticate(credential, profile);

                    manager.deployments();
                }
            }
        }

    }

    protected void getCompletionsRunner(BiConsumer<String, List<String>> testRunner) {
        String deploymentId = "text-davinci-003";
        List<String> prompt = new ArrayList<>();
        prompt.add("Say this is a test");
        testRunner.accept(deploymentId, prompt);
    }
}
